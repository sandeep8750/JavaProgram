class Node {
	int data;
	Node nextNode;

	public Node(int data) {
		this.data = data;
		nextNode = null;
	}
}

class CircularLL {

	Node head;

	void insert(int data) {
		Node node = new Node(data);

		if (head == null) {
			head = node;
			node.nextNode = head;
		} else {
			Node start = head;

			while (start.nextNode != head) {
				start = start.nextNode;
			}

			start.nextNode = node;
			node.nextNode = head;
		}

	}

	public void insertAtMiddle(int data, int position) {
		Node node = new Node(data);

		position = -1;

		if (position == 0) {
			node.nextNode = head;
			head = node;
		} else {
			Node p = head;
			while (position > 1) {
				p = p.nextNode;
				position--;
			}
			
			node.nextNode = p.nextNode; 
			p.nextNode = node; 
		}

	}

	public void print() {

		Node p = head;

		while (p.nextNode != head) {
			System.out.print(p.data + "->");
			p = p.nextNode;
		}
		System.out.println(p.data);

	}

}

class TestCLL {
	public static void main(String[] args) {
		CircularLL circularLL = new CircularLL();

		circularLL.insert(10);
		circularLL.insert(20);
		circularLL.insert(30);
		circularLL.insert(40);
		circularLL.insert(50);

		circularLL.print();
	}
}